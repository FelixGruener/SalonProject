{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\felix.gruener\\\\Downloads\\\\SalonProject\\\\salon-ui\\\\src\\\\components\\\\LoadingIndicator.js\";\nimport React from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { progressService } from '../services/ProgressService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass LoadingIndicator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentProgress: {\n        now: 0\n      },\n      showProgress: true\n    };\n  }\n\n  componentDidMount() {\n    this.subscription = progressService.getProgress().subscribe(progress => {\n      if (progress) {\n        if (!this.showProgress) {\n          this.setState({\n            showProgress: true\n          });\n        }\n\n        this.setState({\n          currentProgress: progress\n        });\n      } else {\n        this.setState({\n          showProgress: false\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    // unsubscribe to ensure no memory leaks\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const {\n      currentProgress,\n      showProgress\n    } = this.state;\n\n    if (showProgress) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: currentProgress.now,\n          label: `${currentProgress.now}%`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this);\n    }\n  }\n\n}\n\nexport default LoadingIndicator;","map":{"version":3,"sources":["C:/Users/felix.gruener/Downloads/SalonProject/salon-ui/src/components/LoadingIndicator.js"],"names":["React","ProgressBar","progressService","LoadingIndicator","Component","constructor","props","state","currentProgress","now","showProgress","componentDidMount","subscription","getProgress","subscribe","progress","setState","componentWillUnmount","unsubscribe","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,6BAAxB;AACA,SAASC,eAAT,QAAgC,6BAAhC;;;AAEA,MAAMC,gBAAN,SAA+BH,KAAK,CAACI,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AAACC,QAAAA,GAAG,EAAE;AAAN,OADR;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL,GAAoBV,eAAe,CAACW,WAAhB,GAA8BC,SAA9B,CAAwCC,QAAQ,IAAI;AACpE,UAAIA,QAAJ,EAAc;AACV,YAAI,CAAC,KAAKL,YAAV,EAAwB;AACpB,eAAKM,QAAL,CAAc;AAAEN,YAAAA,YAAY,EAAE;AAAhB,WAAd;AACH;;AACD,aAAKM,QAAL,CAAc;AAAER,UAAAA,eAAe,EAAEO;AAAnB,SAAd;AACH,OALD,MAKO;AACH,aAAKC,QAAL,CAAc;AAAEN,UAAAA,YAAY,EAAE;AAAhB,SAAd;AACH;AACJ,KATmB,CAApB;AAUH;;AAEDO,EAAAA,oBAAoB,GAAG;AACnB;AACA,SAAKL,YAAL,CAAkBM,WAAlB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEX,MAAAA,eAAF;AAAmBE,MAAAA;AAAnB,QAAoC,KAAKH,KAA/C;;AACA,QAAIG,YAAJ,EAAkB;AACd,0BACI;AAAA,+BACI,QAAC,WAAD;AAAa,UAAA,GAAG,EAAEF,eAAe,CAACC,GAAlC;AAAuC,UAAA,KAAK,EAAG,GAAED,eAAe,CAACC,GAAI;AAArE;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAMO;AACH,0BAAQ;AAAA;AAAA;AAAA;AAAA,cAAR;AACH;AACJ;;AAtC0C;;AAyC/C,eAAeN,gBAAf","sourcesContent":["import React from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar';\r\nimport { progressService } from '../services/ProgressService';\r\n\r\nclass LoadingIndicator extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentProgress: {now: 0},\r\n            showProgress: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.subscription = progressService.getProgress().subscribe(progress => {\r\n            if (progress) {\r\n                if (!this.showProgress) {\r\n                    this.setState({ showProgress: true });\r\n                }\r\n                this.setState({ currentProgress: progress });\r\n            } else {\r\n                this.setState({ showProgress: false });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // unsubscribe to ensure no memory leaks\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    render() {\r\n        const { currentProgress, showProgress } = this.state;\r\n        if (showProgress) {\r\n            return (\r\n                <div>\r\n                    <ProgressBar now={currentProgress.now} label={`${currentProgress.now}%`} />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<div/>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default LoadingIndicator;"]},"metadata":{},"sourceType":"module"}