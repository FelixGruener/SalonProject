{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\felix.gruener\\\\Downloads\\\\SalonProject\\\\salon-ui\\\\src\\\\components\\\\AppNotificationComponent.js\";\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { notificationService } from '../services/NotificationService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AppNotificationComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      notifications: []\n    };\n  }\n\n  componentDidMount() {\n    this.subscription = notificationService.getNotifier().subscribe(notification => {\n      if (notification) {\n        this.setState({\n          notifications: [notification]\n        });\n      } else {\n        this.setState({\n          notifications: []\n        });\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const {\n      notifications\n    } = this.state;\n\n    const onClose = () => this.setState({\n      notifications: []\n    });\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: notifications.map((notification, index) => /*#__PURE__*/_jsxDEV(Alert, {\n        variant: notification.variant,\n        onClose: onClose,\n        dismissible: true,\n        children: notification.message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AppNotificationComponent;","map":{"version":3,"sources":["C:/Users/felix.gruener/Downloads/SalonProject/salon-ui/src/components/AppNotificationComponent.js"],"names":["React","Alert","notificationService","AppNotificationComponent","Component","constructor","props","state","notifications","componentDidMount","subscription","getNotifier","subscribe","notification","setState","componentWillUnmount","unsubscribe","render","onClose","map","index","variant","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,iBAApB;AACA,SAASC,mBAAT,QAAoC,iCAApC;;;AAEA,MAAMC,wBAAN,SAAuCH,KAAK,CAACI,SAA7C,CAAuD;AAEnDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAE;AADN,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,YAAL,GAAoBR,mBAAmB,CAACS,WAApB,GAAkCC,SAAlC,CAA4CC,YAAY,IAAI;AAC5E,UAAIA,YAAJ,EAAkB;AACd,aAAKC,QAAL,CAAc;AAAEN,UAAAA,aAAa,EAAE,CAACK,YAAD;AAAjB,SAAd;AACH,OAFD,MAEO;AACH,aAAKC,QAAL,CAAc;AAAEN,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACH;AACJ,KANmB,CAApB;AAOH;;AAEDO,EAAAA,oBAAoB,GAAG;AACnB,SAAKL,YAAL,CAAkBM,WAAlB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAET,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;;AACA,UAAMW,OAAO,GAAG,MAAM,KAAKJ,QAAL,CAAc;AAAEN,MAAAA,aAAa,EAAE;AAAjB,KAAd,CAAtB;;AACA,wBACI;AAAA,gBACKA,aAAa,CAACW,GAAd,CAAkB,CAACN,YAAD,EAAeO,KAAf,kBACf,QAAC,KAAD;AAAoB,QAAA,OAAO,EAAEP,YAAY,CAACQ,OAA1C;AAAmD,QAAA,OAAO,EAAEH,OAA5D;AAAqE,QAAA,WAAW,MAAhF;AAAA,kBACKL,YAAY,CAACS;AADlB,SAAaF,KAAb;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AApCkD;;AAuCvD,eAAejB,wBAAf","sourcesContent":["import React from 'react';\r\nimport {Alert} from 'react-bootstrap'\r\nimport { notificationService } from '../services/NotificationService';\r\n\r\nclass AppNotificationComponent extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            notifications: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.subscription = notificationService.getNotifier().subscribe(notification => {\r\n            if (notification) {\r\n                this.setState({ notifications: [notification] });\r\n            } else {\r\n                this.setState({ notifications: [] });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.subscription.unsubscribe();\r\n    }\r\n\r\n    render() {\r\n        const { notifications } = this.state;\r\n        const onClose = () => this.setState({ notifications: [] });\r\n        return (\r\n            <div>\r\n                {notifications.map((notification, index) =>\r\n                    <Alert  key={index} variant={notification.variant} onClose={onClose} dismissible>\r\n                        {notification.message}\r\n                    </Alert >\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AppNotificationComponent;"]},"metadata":{},"sourceType":"module"}